using DevExpress.BarCodes;
using DevExpress.XtraEditors;
using DevExpress.XtraPrinting.BarCode;
using DevExpress.XtraReports.UI;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

namespace AccountingMS
{
    public partial class formBarcodeCoupon : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        // SearchProduct(supPrdNameBarcode);
        public string supPrdNameBarcode;
        ComponentFlyoutDialog flyDialog = new ComponentFlyoutDialog();
        ClsTblBranch clsTbBranch;
        ClsTblProduct clsTbProduct;
        ClsTblPrdPriceMeasurment clsTbPrdMsur;

        public formBarcodeCoupon()
        {
            Program.Localization();
            InitializeComponent();
            this.barCode = new BarCode();

            InitComboBoxes();
            InitBarocdeSymbology();
            InitBarcodeDefaultData();
            InitUserSettings();

            this.Load += FormBarcode_Load;
            textEditSrchBarcode.KeyDown += TextEditSrchBarcode_KeyDown;
            //textEditProduct.EditValueChanged += BarCodeText_EditValueChanged;
            //textEditPrdMsur.EditValueChanged += TextEditPrdMsur_EditValueChanged;
            comboBoxEditSymbology.EditValueChanged += ComboBoxEdit2_EditValueChanged;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            AccountingMS.accountingEntities dbContext = new AccountingMS.accountingEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.CouponBarcodes.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    textEditBarocdeNo.Properties.DataSource = dbContext.CouponBarcodes.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        #region barcode 
        Image reImg
        {
            get;
            set;
        }
        BarcodeLib.Barcode b = new BarcodeLib.Barcode()
        {
            EncodedType = BarcodeLib.TYPE.CODE128,
            IncludeLabel = true,
            LabelPosition = BarcodeLib.LabelPositions.BOTTOMCENTER,
            Alignment = BarcodeLib.AlignmentPositions.CENTER

        };
        Image drawImg(int width = 100, int Height = 50, string code = "")
        {

            int W = width;
            int H = Height;


            try
            {
                // b.BarWidth = textBoxBarWidth.Text.Trim().Length < 1 ? null : (int?)Convert.ToInt32(textBoxBarWidth.Text.Trim());

                Image img = b.Encode(BarcodeLib.TYPE.CODE128, code, W, H);// this.btnForeColor.BackColor, this.btnBackColor.BackColor, W, H);

                return img;
            }
            catch (Exception ex)
            {

                width++;
                return drawImg(width, Height, code);
            }


        }
        #endregion

        private async void FormBarcode_Load(object sender, EventArgs e)
        {
            await InitDataAsync();
        }

        private async Task InitDataAsync()
        {
            await InitObjectsAsync();
            InitDefaultData();
        }

        private async Task InitObjectsAsync()
        {
            IList<Task> taskList = new List<Task>();

            taskList.Add(Task.Run(() => this.clsTbBranch = new ClsTblBranch()));
            taskList.Add(Task.Run(() => this.clsTbProduct = new ClsTblProduct()));
            taskList.Add(Task.Run(() => this.clsTbPrdMsur = new ClsTblPrdPriceMeasurment()));

            await Task.WhenAll(taskList);
        }

        private void InitDefaultData()
        {
            tblProductBindingSource.DataSource = this.clsTbProduct.GetProductList;
            textEditCompanyName.EditValue = this.clsTbBranch.GetBranchName(Session.CurBranch.brnId);
        }

        private void InitBarcodeDefaultData()
        {
            this.barCode.Symbology = Symbology.EAN13;

            Font fontDefault = new Font("Segoe UI", 8.75F);
            barCode.CodeTextFont = fontDefault;
            barCode.BottomCaption.Font = fontDefault;
            barCode.TopCaption.Font = fontDefault;
            barCode.TopCaption.Font = label1.Font;
            barCode.BottomCaption.Font = label1.Font;
        }

        private void InitBarocdeSymbology()
        {
            comboBoxEditSymbology.Properties.Items.AddRange(typeof(Symbology).GetEnumValues());
            comboBoxEditSymbology.EditValue = Symbology.Code128;
        }

        private void showTextCE_CheckStateChanged(object sender, EventArgs e)
        {
            SetBarcodeShowText();
            RefreshBarcodePicture();
        }

        private void TextEditSrchBarcode_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) textEditBarocdeNo.Text = textEditSrchBarcode.Text;
            //if (e.KeyCode == Keys.Enter) SearchProduct(textEditSrchBarcode.Text);
        }
        accountingEntities db = new accountingEntities();

        public void SearchProduct(string barcodeNo)
        {
            textEditSrchBarcode.EditValue = null;
            if (!ValidateBarcodeNo(barcodeNo)) return;

            var barcode = db.CouponBarcodes.FirstOrDefault(x => x.BarCode == barcodeNo);
            if (barcode == null) return;
            var PriceOfer = db.tblProductPriceOffers.FirstOrDefault(x => x.DiscountType == 3);

            textEditProductName.EditValue = barcode.CouponName;
            textEditExpireDate.EditValue = PriceOfer.ExpireDate;
            textEditPrdPrice.EditValue = PriceOfer.Price;

            //textEditProduct.EditValue = PriceMsur.ppmPrdId;
        }

        private bool ValidateBarcodeNo(string barcodeNo)
        {
            bool isValid =  db.CouponBarcodes.Any(x => x.BarCode == barcodeNo); 
            //if (!isValid)
            //    ClsXtraMssgBox.ShowError(MySetting.GetPrivateSetting.LangEng ? "Sorry, the barcode number does not exist!" : "عذراُ، رقم الباركود غير موجود!");

            return isValid;
        }

        private void BarCodeText_EditValueChanged(object sender, EventArgs e)
        {
            SearchLookUpEdit editor = sender as SearchLookUpEdit;
            if (editor?.EditValue == null) return;

            textEditProductName.EditValue = editor.Properties.GetDisplayText(editor.EditValue);
            InitPrdMsurData(Convert.ToInt32(editor.EditValue));
        }

        private void TextEditPrdMsur_EditValueChanged(object sender, EventArgs e)
        {
            LookUpEdit editor = sender as LookUpEdit;
            if (editor?.EditValue == null) return;

            //    var tbPrdMsur = editor.GetSelectedDataRow() as tblPrdPriceMeasurment;
            if (editor?.EditValue is int ppmId)
            {
                var tbPrdMsur = db.tblPrdPriceMeasurments.FirstOrDefault(x => x.ppmId == ppmId);
                if (tbPrdMsur == null) return;
                var barcode = db.tblBarcode.FirstOrDefault(x => x.brcPrdMsurId == tbPrdMsur.ppmId);
                textEditBarocdeNo.EditValue = barcode.brcNo;
                bool proTax = (clsTbProduct.GetPrdObjByPrdId(tbPrdMsur.ppmPrdId)?.prdPriceTax) ?? false;
                textEditPrdPrice.EditValue = clsTbPrdMsur.GetppmSalePrice(proTax, tbPrdMsur);
            }

            //   textEditBarocdeNo.EditValue = tbPrdMsur.ppmBarcode1;

        }

        private void InitPrdMsurData(int prdId)
        {
            tblPrdPriceMeasurmentBindingSource.DataSource = this.clsTbPrdMsur.GetPrdPriceMsurListByPrdId(prdId);
            //textEditPrdMsur.EditValue = this.clsTbPrdMsur.GetPrdPriceMsurDefaultRowByPrdId(prdId)?.ppmId;
        }

        private void ComboBoxEdit2_EditValueChanged(object sender, EventArgs e)
        {
            this.barCode.Symbology = (Symbology)comboBoxEditSymbology.EditValue;
            RefreshBarcodePicture();
        }

        private void editValueChanged(object sender, EventArgs e)
        {
            RefreshBarcodePicture();
            SearchProduct(textEditBarocdeNo.Text);
        }

        #region RefreshBarcodePicture
        void RefreshBarcodePicture()
        {
            pictureEdit.Image = null;
            InitializeBarCode();
            try
            {
                //if (textEditBarocdeNo.Text == "") textEditBarocdeNo.Text = "0";
               
                errorText.Visible = false;
             
                    pictureEdit.Image = barCode.BarCodeImage;

                    pictureEdit.Size = pictureEdit.Image.Size;

               


            }
            catch
            {
                errorText.Visible = true;
            }
            pictureEdit.Refresh();

            if (!string.IsNullOrEmpty(textEditBarocdeNo.Text))
            {
                reImg = drawImg(code: textEditBarocdeNo.Text);
                picbarcode.Image = reImg;
                picbarcode.Width = reImg.Width + 20;
                picbarcode.Refresh();
                picbarcode.Update();
            }
        }

        void InitializeBarCode()
        {
            if (barCode == null) return;
            //barCode.Symbology = Symbology.DataBar;

            barCode.BackColor = backColorE.Color;
            barCode.ForeColor = foreColorE.Color;
            barCode.RotationAngle = (float)angleSE.Value;
            barCode.CodeTextHorizontalAlignment = (StringAlignment)codeTextHorzAlignmentCB.SelectedItem;
            barCode.CodeTextVerticalAlignment = (StringAlignment)codeTextVertAlignmentCB.SelectedItem;
            if (codeTextFE.SelectedItem != null) barCode.CodeTextFont = new Font((string)codeTextFE.SelectedItem, barCode.CodeTextFont.Size);

            barCode.TopCaption.Text = checkEditCompanyName.Checked ? textEditCompanyName.Text : string.Empty;
            barCode.TopCaption.HorizontalAlignment = (StringAlignment)topCaptionAligmentCB.SelectedItem;
            barCode.TopCaption.ForeColor = topCaptionForeCE.Color;
            if (topCaptionFE.SelectedItem != null) barCode.TopCaption.Font = new Font((string)topCaptionFE.SelectedItem, barCode.TopCaption.Font.Size);

            barCode.BottomCaption.Text = checkEditPrdName.Checked ? textEditProductName.Text : string.Empty;
            barCode.BottomCaption.HorizontalAlignment = (StringAlignment)bottomCaptionAligmentCB.SelectedItem;
            barCode.BottomCaption.ForeColor = bottomCaptionForeCE.Color;
            if (bottomCaptionFE.SelectedItem != null) barCode.BottomCaption.Font = new Font((string)bottomCaptionFE.SelectedItem, barCode.BottomCaption.Font.Size);

            if (!string.IsNullOrEmpty(textEditWidth.Text)) barCode.Module = Convert.ToDouble(textEditWidth.EditValue);
            if (!string.IsNullOrEmpty(textEditHeight.Text)) barCode.BarHeight = float.Parse(textEditHeight.Text);

            barCode.AutoSize = true;
            barCode.DpiX = 108;
            barCode.DpiY = 108;
            InitializeBarcodeText();
        }

        void InitializeBarcodeText()
        {
            barCode.CodeText = string.IsNullOrEmpty(textEditBarocdeNo.Text) ? null : textEditBarocdeNo.EditValue.ToString();
        }
        #endregion

        private void BtnDefaultSettings_Click(object sender, EventArgs e)
        {
            InitDefaultSettings();
            RefreshBarcodePicture();
        }

        private void BtnUserSettings_Click(object sender, EventArgs e)
        {
            InitUserSettings();
            RefreshBarcodePicture();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (!ValidateData()) return;

            flyDialog.WaitForm(this, 1);
            //  ReportBarcode report = new ReportBarcode(this.barCode, GetDictionarySettings());
            ReportBarcode report = new ReportBarcode(this.barCode, this.picbarcode, GetDictionarySettings());
            // report.Margins.Left = 3;
            report.Margins.Right = 3;
            report.DefaultPrinterSettingsUsing.UseMargins = true;
            report.ShowPrintMarginsWarning = false;
            //     report.PrintingSystem.StartPrint += PrintingSystem_StartPrint;
            report.PrintingSystem.StartPrint += (ss, ee) => { ee.PrintDocument.PrinterSettings.Copies = Convert.ToInt16(spinEdit1.EditValue); };
            using ReportPrintTool printTool = new ReportPrintTool(report);

            flyDialog.WaitForm(this, 0);

            printTool.ShowPreviewDialog();
            spinEdit1.EditValue = 1;
        }



        private bool ValidateData()
        {
            if (!dxValidationProvider1.Validate()) return false;
            if (textEditBarocdeNo.EditValue == null) return false;
            return true;
        }

        private void BtnPrintBarocde_Click(object sender, EventArgs e)
        {
            if (!ValidateData()) return;
            flyDialog.WaitForm(this, 1);
            // ClsPrintReport.PrintBarcode(this.barCode, GetDictionarySettings());
            ClsPrintReport.PrintBarcode(this.barCode, picbarcode, GetDictionarySettings(), Convert.ToInt16(spinEdit1.EditValue));
            flyDialog.WaitForm(this, 0);
            spinEdit1.EditValue = 1;

        }

      
        private IDictionary<BarcodeSettings, string> GetDictionarySettings()
        {
            IDictionary<BarcodeSettings, string> barcodeSettings = new Dictionary<BarcodeSettings, string>();

            if (checkEditCompanyName.Checked && !string.IsNullOrEmpty(textEditCompanyName.Text))
                barcodeSettings.Add(BarcodeSettings.CompanyName, textEditCompanyName.Text);
            if (checkEditBarcodeNo.Checked && !string.IsNullOrEmpty(textEditBarocdeNo.Text))
                barcodeSettings.Add(BarcodeSettings.BarcodeNo, textEditBarocdeNo.Text);
            if (checkEditPrdName.Checked && !string.IsNullOrEmpty(textEditProductName.Text))
                barcodeSettings.Add(BarcodeSettings.ProductName, textEditProductName.Text);
            if (!string.IsNullOrWhiteSpace(textEditOtherInfo.Text))
                barcodeSettings.Add(BarcodeSettings.OtherInfo, textEditOtherInfo.Text);
            if (checkEditExpireDate.Checked && !string.IsNullOrEmpty(textEditExpireDate.Text))
                barcodeSettings.Add(BarcodeSettings.ExpireDate, string.Format((!MySetting.GetPrivateSetting.LangEng) ? "تاريخ الإنتهاء: {0}" : "Expiration Date: {0}", textEditExpireDate.DateTime.ToShortDateString()));
            if (checkEditPrdPrice.Checked && !string.IsNullOrEmpty(textEditPrdPrice.Text))
            {
                decimal price = Convert.ToDecimal(textEditPrdPrice.EditValue);
                decimal tax = Convert.ToDecimal(MySetting.GetPrivateSetting.taxDefault);
                decimal priceTax = (tax != 0) ? Math.Round(price + (price * (tax / 100)), 2, MidpointRounding.AwayFromZero) : price;
                if (MySetting.GetPrivateSetting.LangEng)
                    barcodeSettings.Add(BarcodeSettings.Price, (!checkEditSaleTax.Checked ? $"price: {price:n2}" : $"The price includes tax: {priceTax}"));
                else
                    barcodeSettings.Add(BarcodeSettings.Price, (!checkEditSaleTax.Checked ? $"قيمة قسيمةالخصم: {price:n2}" : $"السعر شامل الضريبة: {priceTax}"));
            }
            barcodeSettings.Add(BarcodeSettings.PageWidth, Convert.ToDouble(textEditPageWidth.EditValue).ToString());

            return barcodeSettings;
        }

        private void InitDefaultSettings()
        {
            comboBoxEditSymbology.EditValue = Symbology.Code128;
            checkEditBarcodeNo.Checked = true;
            checkEditCompanyName.Checked = true;
            checkEditPrdName.Checked = true;
            checkEditExpireDate.Checked = false;
            checkEditPrdPrice.Checked = false;
            textEditWidth.EditValue = 0.5F;
            textEditHeight.EditValue = 10F;
            textEditPageWidth.EditValue = 7F;
        }

     
        private void InitUserSettings()
        {
            BarSetting.ReadBarSettingXml();
            comboBoxEditSymbology.EditValue = (Symbology)BarSetting.GetBarSetting.barcodeSymbology;
            checkEditBarcodeNo.Checked = BarSetting.GetBarSetting.barcodeBarcodeNo;
            checkEditCompanyName.Checked = BarSetting.GetBarSetting.barcodeCompanyName;
            checkEditPrdName.Checked = BarSetting.GetBarSetting.barcodePrdName;
            checkEditExpireDate.Checked = BarSetting.GetBarSetting.barcodeExpireDate;
            checkEditPrdPrice.Checked = BarSetting.GetBarSetting.barcodePrdPrice;
            textEditWidth.EditValue = BarSetting.GetBarSetting.barcodeWidth;
            textEditHeight.EditValue = BarSetting.GetBarSetting.barcodeHeight;
            textEditPageWidth.EditValue = BarSetting.GetBarSetting.barcodePageWidth;
            checkEditSaleTax.Checked = BarSetting.GetBarSetting.checkEditSaleTax;
        }
        public static BarSetting BarSetting = new BarSetting();
        private void BtnSaveUserSettings_Click(object sender, EventArgs e)
        {
            BarSetting.GetBarSetting.barcodeSymbology = Convert.ToByte(comboBoxEditSymbology.EditValue);
            BarSetting.GetBarSetting.barcodeBarcodeNo = checkEditBarcodeNo.Checked;
            BarSetting.GetBarSetting.barcodeCompanyName = checkEditCompanyName.Checked;
            BarSetting.GetBarSetting.barcodePrdName = checkEditPrdName.Checked;
            BarSetting.GetBarSetting.barcodeExpireDate = checkEditExpireDate.Checked;
            BarSetting.GetBarSetting.barcodePrdPrice = checkEditPrdPrice.Checked;
            BarSetting.GetBarSetting.barcodeWidth = (float)Convert.ToDouble(textEditWidth.EditValue);
            BarSetting.GetBarSetting.barcodeHeight = (float)Convert.ToDouble(textEditHeight.EditValue);
            BarSetting.GetBarSetting.barcodePageWidth = (float)Convert.ToDouble(textEditPageWidth.EditValue);
            BarSetting.GetBarSetting.checkEditSaleTax = checkEditSaleTax.Checked;
            BarSetting.WriterBarSettingXml();
            XtraMessageBox.Show((!MySetting.GetPrivateSetting.LangEng) ? "تم حفظ الإعدادات بنجاح." : "Saved successfully.");
        }


        private void SetBarcodeShowText()
        {
            barCode.Options.Codabar.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code11.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code39.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code39Extended.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code93.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code93Extended.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Code128.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.CodeMSI.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.DataBar.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.DataMatrix.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.DataMatrixGS1.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.EAN8.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.EAN13.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.EAN128.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Industrial2of5.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Interleaved2of5.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.IntelligentMail.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.ITF14.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.Matrix2of5.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.PDF417.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.PostNet.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.QRCode.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.UPCA.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.UPCE0.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.UPCE1.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.UPCSupplemental2.ShowCodeText = checkEditBarcodeNo.Checked;
            barCode.Options.UPCSupplemental5.ShowCodeText = checkEditBarcodeNo.Checked;
        }

        private BarCodeGeneratorBase GetBarCodeSymbology(Symbology symbology)
        {
            switch (symbology)
            {
                case Symbology.QRCode:
                    return new QRCodeGenerator();
                case Symbology.Codabar:
                    return new CodabarGenerator();
                case Symbology.Code11:
                    return new Code11Generator();
                case Symbology.Code128:
                    return new Code128Generator();
                case Symbology.Code39:
                    return new Code39Generator();
                case Symbology.Code39Extended:
                    return new Code93ExtendedGenerator();
                case Symbology.Code93:
                    return new Code93Generator();
                case Symbology.Code93Extended:
                    return new Code93ExtendedGenerator();
                case Symbology.CodeMSI:
                    return new CodeMSIGenerator();
                case Symbology.DataBar:
                    return new DataBarGenerator();
                case Symbology.DataMatrix:
                    return new DataMatrixGenerator();
                case Symbology.DataMatrixGS1:
                    return new DataMatrixGS1Generator();
                case Symbology.EAN128:
                    return new EAN128Generator();
                default:
                    return new Code11Generator();
            }
        }

        private void InitComboBoxes()
        {
            foreach (StringAlignment alignment in Enum.GetValues(typeof(StringAlignment)))
            {
                topCaptionAligmentCB.Properties.Items.Add(alignment);
                bottomCaptionAligmentCB.Properties.Items.Add(alignment);
                codeTextHorzAlignmentCB.Properties.Items.Add(alignment);
                codeTextVertAlignmentCB.Properties.Items.Add(alignment);
            }
            ((System.ComponentModel.ISupportInitialize)(this.topCaptionAligmentCB.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.bottomCaptionAligmentCB.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.codeTextHorzAlignmentCB.Properties)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.codeTextVertAlignmentCB.Properties)).BeginInit();
            topCaptionAligmentCB.SelectedIndex = 1;
            bottomCaptionAligmentCB.SelectedIndex = 1;
            codeTextHorzAlignmentCB.SelectedIndex = 1;
            codeTextVertAlignmentCB.SelectedIndex = 1;
            ((System.ComponentModel.ISupportInitialize)(this.topCaptionAligmentCB.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.bottomCaptionAligmentCB.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.codeTextHorzAlignmentCB.Properties)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.codeTextVertAlignmentCB.Properties)).EndInit();
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void checkEditSaleTax_CheckedChanged(object sender, EventArgs e)
        {
            if (checkEditSaleTax.Checked) checkEditPrdPrice.Checked = true;
        }

        private void formBarcode_Activated(object sender, EventArgs e)
        {

            //textEditProduct.Text= supPrdNameBarcode ;
        }
    }
}


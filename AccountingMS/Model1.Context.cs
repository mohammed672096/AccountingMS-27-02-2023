//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountingMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class accountingEntities : DbContext
    {
        public accountingEntities()
            : base("name=accountingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblCurrency> tblCurrencies { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblTaxAccount> tblTaxAccounts { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblUserRole> tblUserRoles { get; set; }
        public virtual DbSet<tblBranchImg> tblBranchImgs { get; set; }
        public virtual DbSet<tblCustomerInvoice> tblCustomerInvoices { get; set; }
        public virtual DbSet<tblSupplierInvoice> tblSupplierInvoices { get; set; }
        public virtual DbSet<tblProductColor> tblProductColors { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblUserControl> tblUserControls { get; set; }
        public virtual DbSet<tblRoleControl> tblRoleControls { get; set; }
        public virtual DbSet<tblControl> tblControls { get; set; }
        public virtual DbSet<tblAccountBank> tblAccountBanks { get; set; }
        public virtual DbSet<tblAccountBox> tblAccountBoxes { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<tblGroupStr> tblGroupStrs { get; set; }
        public virtual DbSet<tblStockTransMain> tblStockTransMains { get; set; }
        public virtual DbSet<tblStore> tblStores { get; set; }
        public virtual DbSet<tblSupplier> tblSuppliers { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblProductQunatity> tblProductQunatities { get; set; }
        public virtual DbSet<tblStockTransSub> tblStockTransSubs { get; set; }
        public virtual DbSet<tblOrderMain> tblOrderMains { get; set; }
        public virtual DbSet<tblPrdExpirate> tblPrdExpirates { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<BarcodeTemplates> BarcodeTemplates { get; set; }
        public virtual DbSet<tblUserBranch> tblUserBranch { get; set; }
        public virtual DbSet<tblBarcode> tblBarcode { get; set; }
        public virtual DbSet<InventoryBalanceing> InventoryBalanceings { get; set; }
        public virtual DbSet<InventoryBalancingDetail> InventoryBalancingDetails { get; set; }
        public virtual DbSet<tblInvStoreMain> tblInvStoreMains { get; set; }
        public virtual DbSet<tblAccount> tblAccounts { get; set; }
        public virtual DbSet<tblDscntPermission> tblDscntPermissions { get; set; }
        public virtual DbSet<TaxDeclaration> TaxDeclarations { get; set; }
        public virtual DbSet<tblPrdexpirateQuanMain> tblPrdexpirateQuanMains { get; set; }
        public virtual DbSet<tblDefaultAccount> tblDefaultAccounts { get; set; }
        public virtual DbSet<fatoraCustmer> fatoraCustmers { get; set; }
        public virtual DbSet<tblEmployeePdf> tblEmployeePdfs { get; set; }
        public virtual DbSet<CouponBarcode> CouponBarcodes { get; set; }
        public virtual DbSet<tblProductPriceOffer> tblProductPriceOffers { get; set; }
        public virtual DbSet<OffersProduct> OffersProducts { get; set; }
        public virtual DbSet<AssetAccount> AssetAccounts { get; set; }
        public virtual DbSet<DepreciationAccount> DepreciationAccounts { get; set; }
        public virtual DbSet<FixedAsset> FixedAssets { get; set; }
        public virtual DbSet<FixedAssetsImg> FixedAssetsImgs { get; set; }
        public virtual DbSet<View_FixedAssets> View_FixedAssets { get; set; }
        public virtual DbSet<RepCommission> RepCommissions { get; set; }
        public virtual DbSet<RepCommissionDetail> RepCommissionDetails { get; set; }
        public virtual DbSet<View_repComm> View_repComm { get; set; }
        public virtual DbSet<View_DrawerRev> View_DrawerRev { get; set; }
        public virtual DbSet<View_unit> View_unit { get; set; }
        public virtual DbSet<tblAssetFrgn> tblAssetFrgns { get; set; }
        public virtual DbSet<tblEntryMain> tblEntryMains { get; set; }
        public virtual DbSet<tblFinancialYear> tblFinancialYears { get; set; }
        public virtual DbSet<tblInvStoreSub> tblInvStoreSubs { get; set; }
        public virtual DbSet<tblPrdExpirateQuan> tblPrdExpirateQuans { get; set; }
        public virtual DbSet<tblPrdPriceMeasurment> tblPrdPriceMeasurments { get; set; }
        public virtual DbSet<tblPrdPriceQuan> tblPrdPriceQuans { get; set; }
        public virtual DbSet<tblProductQtyOpn> tblProductQtyOpns { get; set; }
        public virtual DbSet<tblRepresentative> tblRepresentatives { get; set; }
        public virtual DbSet<tblOrderSub> tblOrderSubs { get; set; }
        public virtual DbSet<tblRepresentativeStore> tblRepresentativeStores { get; set; }
        public virtual DbSet<tblSetting> tblSettings { get; set; }
        public virtual DbSet<View_repCommReport> View_repCommReport { get; set; }
        public virtual DbSet<tblAsset> tblAssets { get; set; }
        public virtual DbSet<tblEntrySub> tblEntrySubs { get; set; }
        public virtual DbSet<tblNotification> tblNotifications { get; set; }
        public virtual DbSet<tblPrdManufacture> tblPrdManufactures { get; set; }
        public virtual DbSet<tblSupplySub> tblSupplySubs { get; set; }
        public virtual DbSet<DrawerPeriod> DrawerPeriods { get; set; }
        public virtual DbSet<tblSupplyMain> tblSupplyMains { get; set; }
        public virtual DbSet<AbsenceRegulation> AbsenceRegulations { get; set; }
        public virtual DbSet<ancestor> ancestors { get; set; }
        public virtual DbSet<AttendingLeaving> AttendingLeavings { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<HolidayEmp> HolidayEmps { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<OfficialVacation> OfficialVacations { get; set; }
        public virtual DbSet<OvertimeAndDelayRegulation> OvertimeAndDelayRegulations { get; set; }
        public virtual DbSet<OvertimeAndDelayRegulationMinutesTable> OvertimeAndDelayRegulationMinutesTables { get; set; }
        public virtual DbSet<Reward> Rewards { get; set; }
        public virtual DbSet<SalaryExtension> SalaryExtensions { get; set; }
        public virtual DbSet<SalaryRegulation> SalaryRegulations { get; set; }
        public virtual DbSet<SalaryRegulationExtension> SalaryRegulationExtensions { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<TimeTable> TimeTables { get; set; }
        public virtual DbSet<cashingEmp> cashingEmps { get; set; }
        public virtual DbSet<View_profit> View_profit { get; set; }
        public virtual DbSet<View_ReportReconstruction> View_ReportReconstruction { get; set; }
    
        public virtual int InsertProduct(Nullable<int> id, string no, string name, Nullable<short> branchid, Nullable<byte> state, Nullable<int> grpNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(short));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(byte));
    
            var grpNoParameter = grpNo.HasValue ?
                new ObjectParameter("GrpNo", grpNo) :
                new ObjectParameter("GrpNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", idParameter, noParameter, nameParameter, branchidParameter, stateParameter, grpNoParameter);
        }
    
        public virtual int InsertProduct1(Nullable<int> id, string no, string name, Nullable<short> branchid, Nullable<byte> state, Nullable<int> grpNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var noParameter = no != null ?
                new ObjectParameter("No", no) :
                new ObjectParameter("No", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var branchidParameter = branchid.HasValue ?
                new ObjectParameter("Branchid", branchid) :
                new ObjectParameter("Branchid", typeof(short));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(byte));
    
            var grpNoParameter = grpNo.HasValue ?
                new ObjectParameter("GrpNo", grpNo) :
                new ObjectParameter("GrpNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct1", idParameter, noParameter, nameParameter, branchidParameter, stateParameter, grpNoParameter);
        }
    
        public virtual ObjectResult<StorQuantityProduct_Result> StorQuantityProduct(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StorQuantityProduct_Result>("StorQuantityProduct", fromDateParameter, toDateParameter);
        }
    
        public virtual int InsProQuanToPos(Nullable<int> id, Nullable<int> prdId, Nullable<double> prdQuantity, Nullable<double> prdSubQuantity, Nullable<double> prdSubQuantity3, Nullable<short> prdStrId, Nullable<short> prdBrnId, Nullable<byte> prdStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            var prdQuantityParameter = prdQuantity.HasValue ?
                new ObjectParameter("prdQuantity", prdQuantity) :
                new ObjectParameter("prdQuantity", typeof(double));
    
            var prdSubQuantityParameter = prdSubQuantity.HasValue ?
                new ObjectParameter("prdSubQuantity", prdSubQuantity) :
                new ObjectParameter("prdSubQuantity", typeof(double));
    
            var prdSubQuantity3Parameter = prdSubQuantity3.HasValue ?
                new ObjectParameter("prdSubQuantity3", prdSubQuantity3) :
                new ObjectParameter("prdSubQuantity3", typeof(double));
    
            var prdStrIdParameter = prdStrId.HasValue ?
                new ObjectParameter("prdStrId", prdStrId) :
                new ObjectParameter("prdStrId", typeof(short));
    
            var prdBrnIdParameter = prdBrnId.HasValue ?
                new ObjectParameter("prdBrnId", prdBrnId) :
                new ObjectParameter("prdBrnId", typeof(short));
    
            var prdStatusParameter = prdStatus.HasValue ?
                new ObjectParameter("prdStatus", prdStatus) :
                new ObjectParameter("prdStatus", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsProQuanToPos", idParameter, prdIdParameter, prdQuantityParameter, prdSubQuantityParameter, prdSubQuantity3Parameter, prdStrIdParameter, prdBrnIdParameter, prdStatusParameter);
        }
    
        public virtual int InsProPriceToPos(Nullable<int> prId, Nullable<int> prPrdId, Nullable<double> pr1, Nullable<double> pr2, Nullable<double> pr3, Nullable<double> prQuantity1, Nullable<double> prQuantity2, Nullable<double> prQuantity3, Nullable<short> prdBrnId, Nullable<bool> prStatus)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("prId", prId) :
                new ObjectParameter("prId", typeof(int));
    
            var prPrdIdParameter = prPrdId.HasValue ?
                new ObjectParameter("prPrdId", prPrdId) :
                new ObjectParameter("prPrdId", typeof(int));
    
            var pr1Parameter = pr1.HasValue ?
                new ObjectParameter("pr1", pr1) :
                new ObjectParameter("pr1", typeof(double));
    
            var pr2Parameter = pr2.HasValue ?
                new ObjectParameter("pr2", pr2) :
                new ObjectParameter("pr2", typeof(double));
    
            var pr3Parameter = pr3.HasValue ?
                new ObjectParameter("pr3", pr3) :
                new ObjectParameter("pr3", typeof(double));
    
            var prQuantity1Parameter = prQuantity1.HasValue ?
                new ObjectParameter("prQuantity1", prQuantity1) :
                new ObjectParameter("prQuantity1", typeof(double));
    
            var prQuantity2Parameter = prQuantity2.HasValue ?
                new ObjectParameter("prQuantity2", prQuantity2) :
                new ObjectParameter("prQuantity2", typeof(double));
    
            var prQuantity3Parameter = prQuantity3.HasValue ?
                new ObjectParameter("prQuantity3", prQuantity3) :
                new ObjectParameter("prQuantity3", typeof(double));
    
            var prdBrnIdParameter = prdBrnId.HasValue ?
                new ObjectParameter("prdBrnId", prdBrnId) :
                new ObjectParameter("prdBrnId", typeof(short));
    
            var prStatusParameter = prStatus.HasValue ?
                new ObjectParameter("prStatus", prStatus) :
                new ObjectParameter("prStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsProPriceToPos", prIdParameter, prPrdIdParameter, pr1Parameter, pr2Parameter, pr3Parameter, prQuantity1Parameter, prQuantity2Parameter, prQuantity3Parameter, prdBrnIdParameter, prStatusParameter);
        }
    
        public virtual int InsGroupToPos(Nullable<int> id, Nullable<int> grpNo, string grpName, Nullable<long> grpAccNo, Nullable<byte> grpCurrency, Nullable<long> grpSalesAccNo, Nullable<long> grpCostAccNo, Nullable<long> grpDscntAccNo, Nullable<long> grpSalesRtrnAccNo, Nullable<long> grpCostRtrnAccNo, Nullable<short> grpBrnId, Nullable<byte> grpStatus, Nullable<long> grpPurchaseAccNo, Nullable<long> grpPurchaseRtrnAccNo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var grpNoParameter = grpNo.HasValue ?
                new ObjectParameter("grpNo", grpNo) :
                new ObjectParameter("grpNo", typeof(int));
    
            var grpNameParameter = grpName != null ?
                new ObjectParameter("grpName", grpName) :
                new ObjectParameter("grpName", typeof(string));
    
            var grpAccNoParameter = grpAccNo.HasValue ?
                new ObjectParameter("grpAccNo", grpAccNo) :
                new ObjectParameter("grpAccNo", typeof(long));
    
            var grpCurrencyParameter = grpCurrency.HasValue ?
                new ObjectParameter("grpCurrency", grpCurrency) :
                new ObjectParameter("grpCurrency", typeof(byte));
    
            var grpSalesAccNoParameter = grpSalesAccNo.HasValue ?
                new ObjectParameter("grpSalesAccNo", grpSalesAccNo) :
                new ObjectParameter("grpSalesAccNo", typeof(long));
    
            var grpCostAccNoParameter = grpCostAccNo.HasValue ?
                new ObjectParameter("grpCostAccNo", grpCostAccNo) :
                new ObjectParameter("grpCostAccNo", typeof(long));
    
            var grpDscntAccNoParameter = grpDscntAccNo.HasValue ?
                new ObjectParameter("grpDscntAccNo", grpDscntAccNo) :
                new ObjectParameter("grpDscntAccNo", typeof(long));
    
            var grpSalesRtrnAccNoParameter = grpSalesRtrnAccNo.HasValue ?
                new ObjectParameter("grpSalesRtrnAccNo", grpSalesRtrnAccNo) :
                new ObjectParameter("grpSalesRtrnAccNo", typeof(long));
    
            var grpCostRtrnAccNoParameter = grpCostRtrnAccNo.HasValue ?
                new ObjectParameter("grpCostRtrnAccNo", grpCostRtrnAccNo) :
                new ObjectParameter("grpCostRtrnAccNo", typeof(long));
    
            var grpBrnIdParameter = grpBrnId.HasValue ?
                new ObjectParameter("grpBrnId", grpBrnId) :
                new ObjectParameter("grpBrnId", typeof(short));
    
            var grpStatusParameter = grpStatus.HasValue ?
                new ObjectParameter("grpStatus", grpStatus) :
                new ObjectParameter("grpStatus", typeof(byte));
    
            var grpPurchaseAccNoParameter = grpPurchaseAccNo.HasValue ?
                new ObjectParameter("grpPurchaseAccNo", grpPurchaseAccNo) :
                new ObjectParameter("grpPurchaseAccNo", typeof(long));
    
            var grpPurchaseRtrnAccNoParameter = grpPurchaseRtrnAccNo.HasValue ?
                new ObjectParameter("grpPurchaseRtrnAccNo", grpPurchaseRtrnAccNo) :
                new ObjectParameter("grpPurchaseRtrnAccNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsGroupToPos", idParameter, grpNoParameter, grpNameParameter, grpAccNoParameter, grpCurrencyParameter, grpSalesAccNoParameter, grpCostAccNoParameter, grpDscntAccNoParameter, grpSalesRtrnAccNoParameter, grpCostRtrnAccNoParameter, grpBrnIdParameter, grpStatusParameter, grpPurchaseAccNoParameter, grpPurchaseRtrnAccNoParameter);
        }
    
        public virtual int InsProductToPos(Nullable<int> id, string prdNo, string prdName, string prdNameEng, Nullable<int> prdGrpNo, string prdDesc, Nullable<bool> prdSaleTax, Nullable<short> prdBrnId, Nullable<byte> prdStatus, Nullable<bool> prdPriceTax, Nullable<double> reorderLevel, Nullable<double> maxLevel, Nullable<bool> prdPurchaseTax, Nullable<bool> suspended)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var prdNoParameter = prdNo != null ?
                new ObjectParameter("prdNo", prdNo) :
                new ObjectParameter("prdNo", typeof(string));
    
            var prdNameParameter = prdName != null ?
                new ObjectParameter("prdName", prdName) :
                new ObjectParameter("prdName", typeof(string));
    
            var prdNameEngParameter = prdNameEng != null ?
                new ObjectParameter("prdNameEng", prdNameEng) :
                new ObjectParameter("prdNameEng", typeof(string));
    
            var prdGrpNoParameter = prdGrpNo.HasValue ?
                new ObjectParameter("prdGrpNo", prdGrpNo) :
                new ObjectParameter("prdGrpNo", typeof(int));
    
            var prdDescParameter = prdDesc != null ?
                new ObjectParameter("prdDesc", prdDesc) :
                new ObjectParameter("prdDesc", typeof(string));
    
            var prdSaleTaxParameter = prdSaleTax.HasValue ?
                new ObjectParameter("prdSaleTax", prdSaleTax) :
                new ObjectParameter("prdSaleTax", typeof(bool));
    
            var prdBrnIdParameter = prdBrnId.HasValue ?
                new ObjectParameter("prdBrnId", prdBrnId) :
                new ObjectParameter("prdBrnId", typeof(short));
    
            var prdStatusParameter = prdStatus.HasValue ?
                new ObjectParameter("prdStatus", prdStatus) :
                new ObjectParameter("prdStatus", typeof(byte));
    
            var prdPriceTaxParameter = prdPriceTax.HasValue ?
                new ObjectParameter("prdPriceTax", prdPriceTax) :
                new ObjectParameter("prdPriceTax", typeof(bool));
    
            var reorderLevelParameter = reorderLevel.HasValue ?
                new ObjectParameter("ReorderLevel", reorderLevel) :
                new ObjectParameter("ReorderLevel", typeof(double));
    
            var maxLevelParameter = maxLevel.HasValue ?
                new ObjectParameter("MaxLevel", maxLevel) :
                new ObjectParameter("MaxLevel", typeof(double));
    
            var prdPurchaseTaxParameter = prdPurchaseTax.HasValue ?
                new ObjectParameter("prdPurchaseTax", prdPurchaseTax) :
                new ObjectParameter("prdPurchaseTax", typeof(bool));
    
            var suspendedParameter = suspended.HasValue ?
                new ObjectParameter("Suspended", suspended) :
                new ObjectParameter("Suspended", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsProductToPos", idParameter, prdNoParameter, prdNameParameter, prdNameEngParameter, prdGrpNoParameter, prdDescParameter, prdSaleTaxParameter, prdBrnIdParameter, prdStatusParameter, prdPriceTaxParameter, reorderLevelParameter, maxLevelParameter, prdPurchaseTaxParameter, suspendedParameter);
        }
    
        public virtual int InsBarcodeToPos(Nullable<int> id, string brcNo, Nullable<int> brcPrdMsurId, Nullable<short> brcBrnId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var brcNoParameter = brcNo != null ?
                new ObjectParameter("brcNo", brcNo) :
                new ObjectParameter("brcNo", typeof(string));
    
            var brcPrdMsurIdParameter = brcPrdMsurId.HasValue ?
                new ObjectParameter("brcPrdMsurId", brcPrdMsurId) :
                new ObjectParameter("brcPrdMsurId", typeof(int));
    
            var brcBrnIdParameter = brcBrnId.HasValue ?
                new ObjectParameter("brcBrnId", brcBrnId) :
                new ObjectParameter("brcBrnId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsBarcodeToPos", idParameter, brcNoParameter, brcPrdMsurIdParameter, brcBrnIdParameter);
        }
    
        public virtual int InsProMeasurmentToPos(Nullable<int> ppmId, string ppmMsurName, Nullable<double> ppmPrice, Nullable<double> ppmSalePrice, Nullable<double> ppmMinSalePrice, Nullable<double> ppmRetailPrice, Nullable<double> ppmBatchPrice, string ppmBarcode1, string ppmBarcode2, string ppmBarcode3, Nullable<double> ppmConversion, Nullable<bool> ppmDefault, Nullable<int> ppmPrdId, Nullable<bool> ppmWeight, Nullable<short> ppmBrnId, Nullable<byte> ppmStatus, Nullable<bool> ppmManufacture)
        {
            var ppmIdParameter = ppmId.HasValue ?
                new ObjectParameter("ppmId", ppmId) :
                new ObjectParameter("ppmId", typeof(int));
    
            var ppmMsurNameParameter = ppmMsurName != null ?
                new ObjectParameter("ppmMsurName", ppmMsurName) :
                new ObjectParameter("ppmMsurName", typeof(string));
    
            var ppmPriceParameter = ppmPrice.HasValue ?
                new ObjectParameter("ppmPrice", ppmPrice) :
                new ObjectParameter("ppmPrice", typeof(double));
    
            var ppmSalePriceParameter = ppmSalePrice.HasValue ?
                new ObjectParameter("ppmSalePrice", ppmSalePrice) :
                new ObjectParameter("ppmSalePrice", typeof(double));
    
            var ppmMinSalePriceParameter = ppmMinSalePrice.HasValue ?
                new ObjectParameter("ppmMinSalePrice", ppmMinSalePrice) :
                new ObjectParameter("ppmMinSalePrice", typeof(double));
    
            var ppmRetailPriceParameter = ppmRetailPrice.HasValue ?
                new ObjectParameter("ppmRetailPrice", ppmRetailPrice) :
                new ObjectParameter("ppmRetailPrice", typeof(double));
    
            var ppmBatchPriceParameter = ppmBatchPrice.HasValue ?
                new ObjectParameter("ppmBatchPrice", ppmBatchPrice) :
                new ObjectParameter("ppmBatchPrice", typeof(double));
    
            var ppmBarcode1Parameter = ppmBarcode1 != null ?
                new ObjectParameter("ppmBarcode1", ppmBarcode1) :
                new ObjectParameter("ppmBarcode1", typeof(string));
    
            var ppmBarcode2Parameter = ppmBarcode2 != null ?
                new ObjectParameter("ppmBarcode2", ppmBarcode2) :
                new ObjectParameter("ppmBarcode2", typeof(string));
    
            var ppmBarcode3Parameter = ppmBarcode3 != null ?
                new ObjectParameter("ppmBarcode3", ppmBarcode3) :
                new ObjectParameter("ppmBarcode3", typeof(string));
    
            var ppmConversionParameter = ppmConversion.HasValue ?
                new ObjectParameter("ppmConversion", ppmConversion) :
                new ObjectParameter("ppmConversion", typeof(double));
    
            var ppmDefaultParameter = ppmDefault.HasValue ?
                new ObjectParameter("ppmDefault", ppmDefault) :
                new ObjectParameter("ppmDefault", typeof(bool));
    
            var ppmPrdIdParameter = ppmPrdId.HasValue ?
                new ObjectParameter("ppmPrdId", ppmPrdId) :
                new ObjectParameter("ppmPrdId", typeof(int));
    
            var ppmWeightParameter = ppmWeight.HasValue ?
                new ObjectParameter("ppmWeight", ppmWeight) :
                new ObjectParameter("ppmWeight", typeof(bool));
    
            var ppmBrnIdParameter = ppmBrnId.HasValue ?
                new ObjectParameter("ppmBrnId", ppmBrnId) :
                new ObjectParameter("ppmBrnId", typeof(short));
    
            var ppmStatusParameter = ppmStatus.HasValue ?
                new ObjectParameter("ppmStatus", ppmStatus) :
                new ObjectParameter("ppmStatus", typeof(byte));
    
            var ppmManufactureParameter = ppmManufacture.HasValue ?
                new ObjectParameter("ppmManufacture", ppmManufacture) :
                new ObjectParameter("ppmManufacture", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsProMeasurmentToPos", ppmIdParameter, ppmMsurNameParameter, ppmPriceParameter, ppmSalePriceParameter, ppmMinSalePriceParameter, ppmRetailPriceParameter, ppmBatchPriceParameter, ppmBarcode1Parameter, ppmBarcode2Parameter, ppmBarcode3Parameter, ppmConversionParameter, ppmDefaultParameter, ppmPrdIdParameter, ppmWeightParameter, ppmBrnIdParameter, ppmStatusParameter, ppmManufactureParameter);
        }
    
        public virtual int InsStoreToPos(Nullable<short> id, Nullable<short> strNo, string strName, string strPhnNo, Nullable<short> strBrnId, Nullable<byte> strStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(short));
    
            var strNoParameter = strNo.HasValue ?
                new ObjectParameter("strNo", strNo) :
                new ObjectParameter("strNo", typeof(short));
    
            var strNameParameter = strName != null ?
                new ObjectParameter("strName", strName) :
                new ObjectParameter("strName", typeof(string));
    
            var strPhnNoParameter = strPhnNo != null ?
                new ObjectParameter("strPhnNo", strPhnNo) :
                new ObjectParameter("strPhnNo", typeof(string));
    
            var strBrnIdParameter = strBrnId.HasValue ?
                new ObjectParameter("strBrnId", strBrnId) :
                new ObjectParameter("strBrnId", typeof(short));
    
            var strStatusParameter = strStatus.HasValue ?
                new ObjectParameter("strStatus", strStatus) :
                new ObjectParameter("strStatus", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsStoreToPos", idParameter, strNoParameter, strNameParameter, strPhnNoParameter, strBrnIdParameter, strStatusParameter);
        }
    
        public virtual int AddCustDataToAccFromPos(ObjectParameter no, ObjectParameter accNo, Nullable<int> iD, string name, string phnNo, string country, string city, string address, string email, Nullable<long> cellingCredit, Nullable<byte> currency, Nullable<byte> salePrice, string taxNo, Nullable<short> brnId, Nullable<byte> status, string nameEn, string countryEn, string cityEn, string addressEn, string commercialRegister, string postalCode, Nullable<short> bankId, string addNo, string buildingNo, string anotherID, string district, string districtEn)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phnNoParameter = phnNo != null ?
                new ObjectParameter("PhnNo", phnNo) :
                new ObjectParameter("PhnNo", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellingCreditParameter = cellingCredit.HasValue ?
                new ObjectParameter("CellingCredit", cellingCredit) :
                new ObjectParameter("CellingCredit", typeof(long));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(byte));
    
            var salePriceParameter = salePrice.HasValue ?
                new ObjectParameter("SalePrice", salePrice) :
                new ObjectParameter("SalePrice", typeof(byte));
    
            var taxNoParameter = taxNo != null ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(string));
    
            var brnIdParameter = brnId.HasValue ?
                new ObjectParameter("BrnId", brnId) :
                new ObjectParameter("BrnId", typeof(short));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var nameEnParameter = nameEn != null ?
                new ObjectParameter("NameEn", nameEn) :
                new ObjectParameter("NameEn", typeof(string));
    
            var countryEnParameter = countryEn != null ?
                new ObjectParameter("CountryEn", countryEn) :
                new ObjectParameter("CountryEn", typeof(string));
    
            var cityEnParameter = cityEn != null ?
                new ObjectParameter("CityEn", cityEn) :
                new ObjectParameter("CityEn", typeof(string));
    
            var addressEnParameter = addressEn != null ?
                new ObjectParameter("AddressEn", addressEn) :
                new ObjectParameter("AddressEn", typeof(string));
    
            var commercialRegisterParameter = commercialRegister != null ?
                new ObjectParameter("CommercialRegister", commercialRegister) :
                new ObjectParameter("CommercialRegister", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var bankIdParameter = bankId.HasValue ?
                new ObjectParameter("BankId", bankId) :
                new ObjectParameter("BankId", typeof(short));
    
            var addNoParameter = addNo != null ?
                new ObjectParameter("AddNo", addNo) :
                new ObjectParameter("AddNo", typeof(string));
    
            var buildingNoParameter = buildingNo != null ?
                new ObjectParameter("BuildingNo", buildingNo) :
                new ObjectParameter("BuildingNo", typeof(string));
    
            var anotherIDParameter = anotherID != null ?
                new ObjectParameter("AnotherID", anotherID) :
                new ObjectParameter("AnotherID", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var districtEnParameter = districtEn != null ?
                new ObjectParameter("DistrictEn", districtEn) :
                new ObjectParameter("DistrictEn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustDataToAccFromPos", no, accNo, iDParameter, nameParameter, phnNoParameter, countryParameter, cityParameter, addressParameter, emailParameter, cellingCreditParameter, currencyParameter, salePriceParameter, taxNoParameter, brnIdParameter, statusParameter, nameEnParameter, countryEnParameter, cityEnParameter, addressEnParameter, commercialRegisterParameter, postalCodeParameter, bankIdParameter, addNoParameter, buildingNoParameter, anotherIDParameter, districtParameter, districtEnParameter);
        }
    
        public virtual int AddInvoiceDataToAccFromPos(ObjectParameter supNo, ObjectParameter supAccNo, string supAccName, string supRefNo, string supDesc, Nullable<double> supTotal, Nullable<double> supTotalFrgn, Nullable<byte> supTaxPercent, Nullable<double> supTaxPrice, Nullable<byte> supCurrency, Nullable<double> supDscntPercent, Nullable<double> supDscntAmount, Nullable<short> supBankId, Nullable<double> supBankAmount, Nullable<short> supCurrencyChng, Nullable<int> supCustSplId, Nullable<System.DateTime> supDate, Nullable<byte> supIsCash, Nullable<byte> supEqfal, Nullable<short> supStrId, Nullable<short> supUserId, Nullable<short> supBrnId, Nullable<byte> supStatus, string carType, string plateNumber, string counterNumber, Nullable<bool> sendToserver, Nullable<bool> isDelete, Nullable<double> paidCash, Nullable<double> remin, Nullable<short> supBoxId, string poNumber, string notes, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> enterDate)
        {
            var supAccNameParameter = supAccName != null ?
                new ObjectParameter("supAccName", supAccName) :
                new ObjectParameter("supAccName", typeof(string));
    
            var supRefNoParameter = supRefNo != null ?
                new ObjectParameter("supRefNo", supRefNo) :
                new ObjectParameter("supRefNo", typeof(string));
    
            var supDescParameter = supDesc != null ?
                new ObjectParameter("supDesc", supDesc) :
                new ObjectParameter("supDesc", typeof(string));
    
            var supTotalParameter = supTotal.HasValue ?
                new ObjectParameter("supTotal", supTotal) :
                new ObjectParameter("supTotal", typeof(double));
    
            var supTotalFrgnParameter = supTotalFrgn.HasValue ?
                new ObjectParameter("supTotalFrgn", supTotalFrgn) :
                new ObjectParameter("supTotalFrgn", typeof(double));
    
            var supTaxPercentParameter = supTaxPercent.HasValue ?
                new ObjectParameter("supTaxPercent", supTaxPercent) :
                new ObjectParameter("supTaxPercent", typeof(byte));
    
            var supTaxPriceParameter = supTaxPrice.HasValue ?
                new ObjectParameter("supTaxPrice", supTaxPrice) :
                new ObjectParameter("supTaxPrice", typeof(double));
    
            var supCurrencyParameter = supCurrency.HasValue ?
                new ObjectParameter("supCurrency", supCurrency) :
                new ObjectParameter("supCurrency", typeof(byte));
    
            var supDscntPercentParameter = supDscntPercent.HasValue ?
                new ObjectParameter("supDscntPercent", supDscntPercent) :
                new ObjectParameter("supDscntPercent", typeof(double));
    
            var supDscntAmountParameter = supDscntAmount.HasValue ?
                new ObjectParameter("supDscntAmount", supDscntAmount) :
                new ObjectParameter("supDscntAmount", typeof(double));
    
            var supBankIdParameter = supBankId.HasValue ?
                new ObjectParameter("supBankId", supBankId) :
                new ObjectParameter("supBankId", typeof(short));
    
            var supBankAmountParameter = supBankAmount.HasValue ?
                new ObjectParameter("supBankAmount", supBankAmount) :
                new ObjectParameter("supBankAmount", typeof(double));
    
            var supCurrencyChngParameter = supCurrencyChng.HasValue ?
                new ObjectParameter("supCurrencyChng", supCurrencyChng) :
                new ObjectParameter("supCurrencyChng", typeof(short));
    
            var supCustSplIdParameter = supCustSplId.HasValue ?
                new ObjectParameter("supCustSplId", supCustSplId) :
                new ObjectParameter("supCustSplId", typeof(int));
    
            var supDateParameter = supDate.HasValue ?
                new ObjectParameter("supDate", supDate) :
                new ObjectParameter("supDate", typeof(System.DateTime));
    
            var supIsCashParameter = supIsCash.HasValue ?
                new ObjectParameter("supIsCash", supIsCash) :
                new ObjectParameter("supIsCash", typeof(byte));
    
            var supEqfalParameter = supEqfal.HasValue ?
                new ObjectParameter("supEqfal", supEqfal) :
                new ObjectParameter("supEqfal", typeof(byte));
    
            var supStrIdParameter = supStrId.HasValue ?
                new ObjectParameter("supStrId", supStrId) :
                new ObjectParameter("supStrId", typeof(short));
    
            var supUserIdParameter = supUserId.HasValue ?
                new ObjectParameter("supUserId", supUserId) :
                new ObjectParameter("supUserId", typeof(short));
    
            var supBrnIdParameter = supBrnId.HasValue ?
                new ObjectParameter("supBrnId", supBrnId) :
                new ObjectParameter("supBrnId", typeof(short));
    
            var supStatusParameter = supStatus.HasValue ?
                new ObjectParameter("supStatus", supStatus) :
                new ObjectParameter("supStatus", typeof(byte));
    
            var carTypeParameter = carType != null ?
                new ObjectParameter("CarType", carType) :
                new ObjectParameter("CarType", typeof(string));
    
            var plateNumberParameter = plateNumber != null ?
                new ObjectParameter("PlateNumber", plateNumber) :
                new ObjectParameter("PlateNumber", typeof(string));
    
            var counterNumberParameter = counterNumber != null ?
                new ObjectParameter("CounterNumber", counterNumber) :
                new ObjectParameter("CounterNumber", typeof(string));
    
            var sendToserverParameter = sendToserver.HasValue ?
                new ObjectParameter("SendToserver", sendToserver) :
                new ObjectParameter("SendToserver", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var paidCashParameter = paidCash.HasValue ?
                new ObjectParameter("paidCash", paidCash) :
                new ObjectParameter("paidCash", typeof(double));
    
            var reminParameter = remin.HasValue ?
                new ObjectParameter("remin", remin) :
                new ObjectParameter("remin", typeof(double));
    
            var supBoxIdParameter = supBoxId.HasValue ?
                new ObjectParameter("supBoxId", supBoxId) :
                new ObjectParameter("supBoxId", typeof(short));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var enterDateParameter = enterDate.HasValue ?
                new ObjectParameter("EnterDate", enterDate) :
                new ObjectParameter("EnterDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInvoiceDataToAccFromPos", supNo, supAccNo, supAccNameParameter, supRefNoParameter, supDescParameter, supTotalParameter, supTotalFrgnParameter, supTaxPercentParameter, supTaxPriceParameter, supCurrencyParameter, supDscntPercentParameter, supDscntAmountParameter, supBankIdParameter, supBankAmountParameter, supCurrencyChngParameter, supCustSplIdParameter, supDateParameter, supIsCashParameter, supEqfalParameter, supStrIdParameter, supUserIdParameter, supBrnIdParameter, supStatusParameter, carTypeParameter, plateNumberParameter, counterNumberParameter, sendToserverParameter, isDeleteParameter, paidCashParameter, reminParameter, supBoxIdParameter, poNumberParameter, notesParameter, dueDateParameter, enterDateParameter);
        }
    
        public virtual int ResetInvPrdQuan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetInvPrdQuan");
        }
    
        public virtual ObjectResult<GetCustomrtWhithBalance_Result> GetCustomrtWhithBalance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomrtWhithBalance_Result>("GetCustomrtWhithBalance", fromDateParameter, toDateParameter);
        }
    
        public virtual int CalculatePrdQuan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalculatePrdQuan");
        }
    
        public virtual int ResetPrdQuan()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetPrdQuan");
        }
    
        public virtual ObjectResult<RepMoveProduct_Result> RepMoveProduct(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RepMoveProduct_Result>("RepMoveProduct", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetOpeningBalance(Nullable<System.DateTime> fromDate, Nullable<short> boxID, Nullable<short> userID, Nullable<short> branchID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var boxIDParameter = boxID.HasValue ?
                new ObjectParameter("BoxID", boxID) :
                new ObjectParameter("BoxID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetOpeningBalance", fromDateParameter, boxIDParameter, userIDParameter, branchIDParameter);
        }
    }
}
